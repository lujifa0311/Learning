1.java中的面向对象的三大基本特征是:【封装】、【继承】、【多态】

封装：对象要有一个明确的边界；边界的划分（对象各司其职、对象的粒度、对象的可重用性）

属性（bean、pojo）：私有的private，有set和get方法
方法：公开或私有 ，public/private
方法声明和实现（interface，implements）

继承：共性放到父类，特性放到子类；父类 --> 子类 --> 一般

关键字： extends
java中一个类最多只能有一个直接的父类，即单继承（具有简单性、树形结构）             
tip：java中要实现多继承，通过接口来实现。
父类中所有属性和方法都能继承给子类；父类中的私有方法不能继承给子类。
java中的访问修饰符
访问修饰符	访问权限	继承
private	本类	不能继承
default	本类+同包	同包子类可以继承
protected	本类+同包+不同子包	可以继承
public	公开	可以继承
 

构造对象过程
     （1）分配空间
       （2）递归地构造父类对象
              a. 父类 初始化属性
              b. 父类 构造方法
      （3）初始化属性
      （4）调用构造方法

super
      super（）  调用父类的构造方法，只能出现在构造方法的第一行
      super.方法名   super表示父类的对象，通过它去调用父类的方法
      注意：在写类的时候，一定要写默认无参的构造方法，如果一个构造方法的
               第一句既不是this(),也不是super()时，那么就会在这里隐含的调用
               他的父类的无参的构造方法，即隐含的有super()。
 

多态：运行时多态（子类的对象放在父类的引用中，例如 Animal a=new Dog,子类对象当父类对象来使用。）

 

多态原则：
       （1）对象类型不变
       （2）只能用引用调用其引用类型中定义的方法
       （3）运行时，根据对象的实际类型去找子类覆盖之后的方法
             例子：
                  有Animal类中有eat()和sleep()两个方法，sleep()中睡8小时；子类Dog中有
                  eat()方法，sleep()方法中睡6小时，还有wangwang()方法。
                  现创建Animal a=new Dog(); 不能调用a.wangwang(),调用a.sleep()输出睡6小时。
对象的强制转换 ：
                   格式： 引用 instanceof 类型
                        引用所指的对象是否与类相符，返回值boolean值。
                 用法：
                       Animal a=new Cat();
                       if(a instanceof Dog)
                       {
                          Dog d=(Dog)a;
                          d.wangwang();
                        }
                 说明:如果只有Dog d=(Dog)a;运行时错误，因为a是Cat而不是Dog （多态原则第一条）
多态的灵活变换
       （1）用于参数列表上:
                               public void m(A a){} 可以用A类的任何子类对象作为参数
        （2）用在返回值上：
                              public A m(){}  这个方法可能返回A类的任何子类对象


2.重载和重写的区别
方法重载：
1、同一个类中
2、方法名相同，参数列表不同（参数顺序、个数、类型）
3、方法返回值、访问修饰符任意
4、与方法的参数名无关

方法重写：
1、有继承关系的子类中
2、方法名相同，参数列表相同（参数顺序、个数、类型），方法返回值相同
3、访问修饰符，访问范围需要大于等于父类的访问范围
4、与方法的参数名无关

3.类和对象
类：是抽象的概念集合，表示的是一个共性的产物，类之中定义的是属性和行为（方法）；
对象：对象是一种个性的表示，表示一个独立的个体，每个对象拥有自己独立的属性，依靠属性来区分不同对象。

可以一句话来总结出类和对象的区别：类是对象的模板，对象是类的实例。类只有通过对象才可以使用，而在开发之中应该先产生类，之后再产生对象。
类不能直接使用，对象是可以直接使用的

4 成员变量和局部变量的区别
局部变量和成员变量的区别：
1.定义的位置不一样【重点】

局部变量：在方法的内部
成员变量：在方法的外部，直接写在类当中
2.作用范围不一样【重点】

局部变量：只有方法当中才可以使用，出了方法就不能再用了
成员变量：整个类都可以通用
3.默认值不一样【重点】

局部变量：没有默认值，如果要想使用，必须手动进行赋值
成员变量：如果没有赋值，会有默认值，规则和数组一样
4.内存的位置不一样（了解）

局部变量：位于栈内存
成员变量：位于堆内存
5.生命周期不一样（了解）

局部变量：随着方法进栈而诞生，随着方法出栈而消失
成员变量：随着对象的创建而诞生，随着对象被垃而消失

5.this的使用
当方法的局部变量和类的成员变量重名的时候,根据就近原则  优先使用局部变量,
如果需要访问本来当中的成员变量,需要使用格式
this.成员变量名

通过谁调用的方法  谁就是this


6.数组的定义
数组的概念  是一种容器 可以同时存放多个数据值

数据的特点
1.数组是一种引用数据类型
2.数据当中的多个数据 ,类型必须统一
3.数组的长度在程序运行期间不可改变

数组的初始化
两种常见的初始化方式
1.动态初始化(指定长度)
2.静态初始化(指定内容)

动态初始化数组的格式
数据类型[] 数组名称 = new 数据类型[数组长度]

静态初始化基本格式
数据类型[] 数组名称 = new 数据类型[]{元素1,元素2,.........};

注意事项,
虽然静态初始化没有直接告诉长度,但是根据大括号里面的元素具体内容,也已自动推算出长度

解析含义
左侧数据类型 也就是数组当中保存的数据,全都是统一的类型
左侧的中括号,代表我是一个数组
左侧数组名称,给数据去的一个名字
右侧的new 代表创建数组的动作
右侧数据类型 必须和左边的数据类型保持一致
右侧中括号的长度  也就是数组当中 到底可以保存多少数据 是一个int数字

7.方法的定义格式
定义格式
public static void 方法名(){
   方法体
}

调用格式
方法名();


方法调用注意事项
1.方法定义的先后顺序无所谓
2.方法定义必须是挨着的,不能在一个方法内部定义另外一个方法
3.方法定义之后,自己不会执行,需要调用之后才是执行
