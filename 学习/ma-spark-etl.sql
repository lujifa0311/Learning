CREATE TABLE etl_task_schedule (
	task_name varchar(64) PRIMARY KEY,
	exec_period varchar(128),
	task_type varchar(32),
	pre_condition TEXT,
	exec_sql TEXT,
	exec_params TEXT,
	check_sql TEXT,
	finish_hour int null,
	create_time varchar(32),
	author varchar(32),
	is_valid boolean
);
CREATE TABLE etl_task_run (
	task_name varchar(64),
	period varchar(32),
	task_type varchar(32),
	status varchar(32),
	pre_condition TEXT,
	exec_sql TEXT,
	exec_params TEXT,
	check_sql TEXT,
	finish_hour int null,
	create_time varchar(32),
	last_updated varchar(32),
	primary key (task_name,period)
);

CREATE TABLE etl_task_log (
    id INTEGER auto_increment PRIMARY KEY,
	task_name varchar(64),
	period varchar(32),
	result varchar(32),
	message TEXT,
	begin_time varchar(32),
	end_time varchar(32)
);

select * from etl_task_schedule;
select * from etl_task_run;
select * from etl_task_log;
select DATE('2019-05-29','-1 days');

delete from etl_task_schedule where task_name is not NULL;
delete from etl_task_run where task_name is not NULL;
delete from etl_task_log where id is not null;

MAILTO=""
10 4 * * * . /etc/profile;cd /home/convertlab-pengcheng.xia/sparketl;/usr/bin/java -cp spark-etl-1.0.jar:./libs/*:/opt/cloudera/parcels/SPARK2/lib/spark2/jars/*:./config -Xms128m -Xmx1024m -Dlog4j.configuration=./log4j.properties -Duser.timezone=UTC com.convertlab.sparketl.SparkETL LaunchSparkETL>/dev/null 2>&1

*/*/

insert into xiaoshu.etl_task_schedule(task_name, exec_period, task_type,create_time, author, is_valid, pre_condition, exec_sql, exec_params, check_sql)values
('SparkETL','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select count(1)=5 from(
select count(1)>0 res from adp_dw.fct_total_order_trans where datediff(''{date_id}'',order_date)<=180 and create_time>=''{next_date_id}''
union all
select count(1)>0 res from adp_dw.fct_coupon_send_trace where datediff(''{date_id}'',add_date)<=180 and create_time>=''{next_date_id}''
union all
select count(1)>0 res from adp_dw.fct_coupon_verify_trace where datediff(''{date_id}'',verify_date)<=180 and create_time>=''{next_date_id}''
union all
select count(1)>0 res from adp_dw.member_u_value where create_time>=''{next_date_id}''
union all
select count(1)>0 res from adp_dw.dim_customer where create_time>=''{next_date_id}'') t where res=true',
null,null,null),
('etl_pull_customer','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
null,
'insert overwrite table etl_pull_customer partition(create_day={date_key})
select
nvl(ci.customer_id,nvl(ci2.customer_id,nvl(ci3.customer_id,nvl(ci1.customer_id,monotonically_increasing_id()+datediff(''{date_id}'',''2019-07-31'')*10000000000000+9100000000000000000)))) as id,
ci.customer_id his_customer_id,
ci1.customer_id ali_customer_id,
ci2.customer_id wechat_customer_id,
case when ci.attr1<>c.customer_id then -1
    when ci.customer_id is null then 1
    when (ci.date34 is null or ci.attr3 is null or unix_timestamp(to_utc_timestamp(c.member_update_time,''Asia/Shanghai''))*1000>ci.date34) then 2
    when (c.customer_type=''member w trans'' and ci.attr3=''无交易会员'') then 3
    else 0 end as update_flag,
case when ci.attr_cus_id is null or (ci.date34 is null or ci.attr3 is null or unix_timestamp(to_utc_timestamp(c.member_update_time,''Asia/Shanghai''))*1000>ci.date34) or (c.customer_type=''member w trans'' and ci.attr3=''无交易会员'') then nvl(ci.version+1,0)
    else ci.version end as version,
c.customer_key,
c.customer_id,
c.customer_name,
c.likely_member,
c.mobile_no,
c.birthday,
c.sex,
c.district_cd,
c.district_name,
c.city_cd,
c.city_name,
c.province_cd,
c.province_name,
c.address,
c.client_key,
c.data_source,
c.member_create_time,
c.member_update_time,
c.wx_uid,
c.wx_name,
c.wxepay_uid,
c.wechatpaymcard_id,
c.wechatpaymcard_create_time,
c.wechatpay_data_source,
c.zfb_uid,
c.alipaymcard_id,
c.alipaymcard_create_time,
c.alipay_data_source,
c.tmall_create_time,
c.tmall_data_source,
c.tb_uid,
c.tb_name,
c.qq_uid,
c.qq_name,
c.tmall_username,
c.user_id,
c.wx_openid1,
c.wx_openid2,
'''' app_deviceid,
c.customer_type,
c.create_time,
c.update_time,
ci3.customer_id openid_customer_id,
c.marriage,
c.child_sex1,
c.child_birthday1,
c.child_sex2,
c.child_birthday2,
c.android_pushid_jg,
c.android_pushid_jg_create_timestamp,
c.ios_pushid_jg,
c.ios_pushid_jg_create_timestamp
from (select c.*,case when zfb_uid<>'''' and zfb_uid<>''None'' then zfb_uid else concat(''rand'',customer_key) end new_zfb_uid,
             case when wxepay_uid<>'''' and wxepay_uid<>''None'' then wxepay_uid when wx_uid<>'''' and wx_uid<>''None'' then wx_uid else concat(''rand'',customer_key) end new_wx_uid,
             case when wx_openid2<>'''' and wx_openid2<>''None'' then wx_openid2 else concat(''rand'',customer_key) end new_wx_openid2
             from (select c.*,row_number() over (partition by customer_id order by member_update_time desc) rn from adp_dw.dim_customer c where customer_type in(''member w trans'',''member w/o trans'') and member_status<>''unregistered'') c where rn=1) c
left outer join (select ci.customer_id,ci.value,ct.date34,ct.version,ct.attr3,ct.customer_id attr_cus_id,ct.attr1 from customer_identity ci inner join customer_attr ct on ct.tenant_id=8 and ci.customer_id=ct.customer_id where ci.tenant_id=8 and ci.type=''c_customer_id'') ci
    on c.customer_id=ci.value
left outer join (select max(customer_id) customer_id,value from customer_identity ci1 left anti join customer_identity ci11
    on ci11.tenant_id=8 and ci11.type=''c_customer_id'' and ci1.customer_id=ci11.customer_id where ci1.tenant_id=8 and ci1.type=''alipay'' group by ci1.value) ci1 on c.new_zfb_uid=ci1.value
left outer join (select max(customer_id) customer_id,value from customer_identity ci2 left anti join customer_identity ci22
    on ci22.tenant_id=8 and ci22.type=''c_customer_id'' and ci2.customer_id=ci22.customer_id where ci2.tenant_id=8 and ci2.type=''wechat-unionid'' group by ci2.value) ci2 on c.new_wx_uid=ci2.value
left outer join (select max(customer_id) customer_id,value from customer_identity ci3 left anti join customer_identity ci33
    on ci33.tenant_id=8 and ci33.type=''c_customer_id'' and ci3.customer_id=ci33.customer_id where ci3.tenant_id=8 and ci3.type=''wechat'' group by ci3.value) ci3 on c.new_wx_openid2=ci3.value',
null,
null
),
('etl_update_customer','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_customer'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_update_customer partition(update_day={date_key})
select c.*,
case when n.channel_id is null then ''未知'' when n.channel_id like ''5000_%'' then n.channel_name else ''其他'' end as channel_name,
case when l.client_key is null then ''未知'' when l.client_key=''ec-h5'' and c.data_source=''8009_9'' then ''官网-H5'' when l.client_key=''ec-h5'' and c.data_source=''50008888'' then ''店头下单'' else l.client_name end as client_name,
case when c.version=0 then ''create''
    else ''update'' end as data_status,
m.province_name mobile_province_name,
m.city_name mobile_city_name
from (select * from etl_pull_customer where create_day={date_key} and update_flag>0) c
left outer join etl_dim_customer_client l on c.client_key=l.client_key
left outer join adp_dw.dim_member_reg_channel n on c.data_source=n.channel_id
left join etl_mobile_location_code m on substr(c.mobile_no,1,7) = m.mobile',
null,
null
),
('etl_update_customer_identity','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_customer'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_update_customer_identity partition(update_day={date_key})
select to_id,from_id from(
select ci.*,row_number() over (partition by from_id order by identity_order,member_update_time desc) rn from(
select id to_id,ali_customer_id from_id,3 identity_order,member_update_time from etl_update_customer where update_day={date_key} and update_flag<=2 and ali_customer_id<>id
union all
select id to_id,wechat_customer_id from_id,1 identity_order,member_update_time from etl_update_customer where update_day={date_key} and update_flag<=2 and wechat_customer_id<>id
union all
select id to_id,openid_customer_id from_id,2 identity_order,member_update_time from etl_update_customer where update_day={date_key} and update_flag<=2 and openid_customer_id<>id) ci) ci where rn=1',
null,
null
),
('customer','day','write_mysql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_customer'' and period=''{date_id}'' and status=''Succeed''',
'select id,
version,
substr(customer_name,1,255) name,
case when sex=''0'' then 1 when sex=''1'' then 2 else 0 end,
mobile_no,
from_unixtime(unix_timestamp(birthday,''yyyyMMdd''),''yyyy-MM-dd''),
address
from etl_update_customer where update_day={date_key} and update_flag<=2',
'{"sql":"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;insert into xiaoshu.customer(tenant_id,create_method,update_method,id,version,name,gender,mobile,birthday,home_address,date_join,date_created,last_updated) values (8,''ImportFromExternalSystem'',''ImportFromExternalSystem'',?,?,?,?,?,?,?,now(),now(),now()) ON DUPLICATE KEY UPDATE version=values(version),name=values(name),gender=values(gender),mobile=values(mobile),birthday=values(birthday),home_address=values(home_address),last_updated=values(last_updated)"}',
null
),
('customer_attr','day','write_mysql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_customer'' and period=''{date_id}'' and status=''Succeed''',
'select id,
version,
customer_id attr1,
customer_key attr2,
case when customer_type=''member w trans'' then ''有交易会员'' else ''无交易会员'' end attr3,
channel_name att4,
mobile_province_name att5,
likely_member att6,
wxepay_uid attr7,
wechatpaymcard_id attr8,
date_format(to_utc_timestamp(wechatpaymcard_create_time, ''Asia/Shanghai''),"yyyy-MM-dd''T''HH:mm:ss''Z''") attr9,
to_utc_timestamp(wechatpaymcard_create_time,''Asia/Shanghai'') date9,
alipaymcard_id attr10,
date_format(to_utc_timestamp(alipaymcard_create_time, ''Asia/Shanghai''),"yyyy-MM-dd''T''HH:mm:ss''Z''") attr11,
to_utc_timestamp(alipaymcard_create_time,''Asia/Shanghai'') date11,
date_format(to_utc_timestamp(tmall_create_time, ''Asia/Shanghai''),"yyyy-MM-dd''T''HH:mm:ss''Z''") attr12,
to_utc_timestamp(tmall_create_time,''Asia/Shanghai'') date12,
tmall_username attr13,
user_id attr18,
client_name attr19,
province_name attr20,
city_name attr21,
district_name attr22,
case when marriage=''0'' then ''未婚'' when marriage=''1'' then ''已婚'' else ''未知'' end attr23,
case when child_sex1=''0'' then ''男'' when child_sex1=''1'' then ''女'' when child_sex1=''2'' then ''未设置'' else ''未知'' end attr24,
android_pushid_jg attr25,
case when child_sex2=''0'' then ''男'' when child_sex2=''1'' then ''女'' when child_sex2=''2'' then ''未设置'' else ''未知'' end attr26,
ios_pushid_jg attr27,
case when length(child_birthday1)=8 then concat(substr(child_birthday1,1,4),''-'',substr(child_birthday1,5,2),''-'',substr(child_birthday1,7))
    when length(child_birthday1)=6 then concat(substr(child_birthday1,1,4),''-'',substr(child_birthday1,5,2),''-01'')
    else null end attr28,
case when length(child_birthday1)=8 then concat(substr(child_birthday1,1,4),''-'',substr(child_birthday1,5,2),''-'',substr(child_birthday1,7))
    when length(child_birthday1)=6 then concat(substr(child_birthday1,1,4),''-'',substr(child_birthday1,5,2),''-01'')
    else null end date28,
case when length(child_birthday2)=8 then concat(substr(child_birthday2,1,4),''-'',substr(child_birthday2,5,2),''-'',substr(child_birthday2,7))
    when length(child_birthday2)=6 then concat(substr(child_birthday2,1,4),''-'',substr(child_birthday2,5,2),''-01'')
    else null end attr29,
case when length(child_birthday2)=8 then concat(substr(child_birthday2,1,4),''-'',substr(child_birthday2,5,2),''-'',substr(child_birthday2,7))
    when length(child_birthday2)=6 then concat(substr(child_birthday2,1,4),''-'',substr(child_birthday2,5,2),''-01'')
    else null end date29,
date_format(to_utc_timestamp(android_pushid_jg_create_timestamp, ''Asia/Shanghai''),"yyyy-MM-dd''T''HH:mm:ss''Z''") attr30,
to_utc_timestamp(android_pushid_jg_create_timestamp,''Asia/Shanghai'') date30,
date_format(to_utc_timestamp(ios_pushid_jg_create_timestamp, ''Asia/Shanghai''),"yyyy-MM-dd''T''HH:mm:ss''Z''") attr31,
to_utc_timestamp(ios_pushid_jg_create_timestamp,''Asia/Shanghai'') date31,
date_format(to_utc_timestamp(member_create_time, ''Asia/Shanghai''),"yyyy-MM-dd''T''HH:mm:ss''Z''") attr33,
to_utc_timestamp(member_create_time, ''Asia/Shanghai'') date33,
date_format(to_utc_timestamp(member_update_time, ''Asia/Shanghai''),"yyyy-MM-dd''T''HH:mm:ss''Z''") attr34,
to_utc_timestamp(member_update_time, ''Asia/Shanghai'') date34,
mobile_city_name attr35
from etl_update_customer where update_day={date_key} and update_flag<=3',
'{"sql":"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;insert into xiaoshu.customer_attr(tenant_id,customer_id,version,date_created,last_updated,attr1,attr2,attr3,attr4,attr5,attr6,attr7,attr8,attr9,date9,attr10,attr11,date11,attr12,date12,attr13,attr18,attr19,attr20,attr21,attr22,attr23,attr24,attr25,attr26,attr27,attr28,date28,attr29,date29,attr30,date30,attr31,date31,attr33,date33,attr34,date34,attr35) values (8,?,?,now(),now(),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE version=values(version),last_updated=values(last_updated),attr1=values(attr1),attr2=values(attr2),attr3=values(attr3),attr4=values(attr4),attr5=values(attr5),attr6=values(attr6),attr7=values(attr7),attr8=values(attr8),attr9=values(attr9),date9=values(date9),attr10=values(attr10),attr11=values(attr11),date11=values(date11),attr12=values(attr12),date12=values(date12),attr13=values(attr13),attr18=values(attr18),attr19=values(attr19),attr20=values(attr20),attr21=values(attr21),attr22=values(attr22),attr23=values(attr23),attr24=values(attr24),attr25=values(attr25),attr26=values(attr26),attr27=values(attr27),attr28=values(attr28),date28=values(date28),attr29=values(attr29),date29=values(date29),attr30=values(attr30),date30=values(date30),attr31=values(attr31),date31=values(date31),attr33=values(attr33),date33=values(date33),attr34=values(attr34),date34=values(date34),attr35=values(attr35)"}',
null
),
('customer_identity','day','write_mysql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''customer_attr'' and period=''{date_id}'' and status=''Succeed''',
'select type,value,version,id,date_created
from (select ci.*,row_number() over (partition by type,value order by date_created desc) rn from (select ''wechat-unionid'' type,case when wxepay_uid<>'''' and wxepay_uid<>''None'' then wxepay_uid else wx_uid end value,version,id,to_utc_timestamp(member_update_time,''Asia/Shanghai'') date_created from etl_update_customer where update_day={date_key} and ((wx_uid<>'''' and wx_uid<>''None'') or (wxepay_uid<>'''' and wxepay_uid<>''None'')) and update_flag<=2
union all select ''alipay'' type,zfb_uid value,version,id,to_utc_timestamp(member_update_time,''Asia/Shanghai'') date_created from etl_update_customer where update_day={date_key} and zfb_uid<>'''' and zfb_uid<>''None'' and update_flag<=2
union all select ''mobile'' type,mobile_no value,version,id,to_utc_timestamp(member_update_time,''Asia/Shanghai'') date_created from etl_update_customer where update_day={date_key} and mobile_no<>'''' and mobile_no<>''None'' and update_flag<=2
union all select ''c_customer_id'' type,customer_id value,version,id,to_utc_timestamp(member_update_time,''Asia/Shanghai'') date_created from etl_update_customer where update_day={date_key} and customer_id<>'''' and customer_id<>''None'' and update_flag<=2
union all select ''c_user_id'' type,user_id value,version,id,to_utc_timestamp(member_update_time,''Asia/Shanghai'') date_created from etl_update_customer where update_day={date_key} and user_id<>'''' and user_id<>''None'' and update_flag<=2
union all select ''applet-wechat'' type,wx_openid1 value,version,id,to_utc_timestamp(member_update_time,''Asia/Shanghai'') date_created from etl_update_customer where update_day={date_key} and wx_openid1<>'''' and wx_openid1<>''None'' and update_flag<=2
union all select ''wechat'' type,wx_openid2 value,version,id,to_utc_timestamp(member_update_time,''Asia/Shanghai'') date_created from etl_update_customer where update_day={date_key} and wx_openid2<>'''' and wx_openid2<>''None'' and update_flag<=2) ci
left anti join customer_identity ci1 on ci1.tenant_id=8 and ci.type=ci1.type and ci.value=ci1.value) ci where ci.rn=1',
'{"sql":"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;insert ignore into xiaoshu.customer_identity(tenant_id,type,value,version,customer_id,date_created,last_updated) values (8,?,?,?,?,?,now())"}',
null
),
('insert_app_notification_identity','day','write_mysql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''customer_identity'' and period=''{date_id}'' and status=''Succeed''',
'select date_created,
customer_id,
substr(push_id,1,64),
os
from (select id customer_id, android_pushid_jg push_id,to_utc_timestamp(android_pushid_jg_create_timestamp,''Asia/Shanghai'') date_created,''android'' os
from etl_update_customer where update_day={date_key} and update_flag<=2 and android_pushid_jg<>''''
union all
select id customer_id, ios_pushid_jg push_id,to_utc_timestamp(ios_pushid_jg_create_timestamp,''Asia/Shanghai'') date_created,''ios'' os
from etl_update_customer where update_day={date_key} and update_flag<=2 and ios_pushid_jg<>'''') p
left anti join app_notification_identity n on n.tenant_id=8 and p.customer_id=n.customer_id and p.push_id=n.push_id',
'{"sql":"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;insert into xiaoshu.app_notification_identity(version,tenant_id,date_created,last_updated,customer_id,provider,push_id,app_key,os) values (0,8,?,now(),?,''jpush'',?,''9891978b17d6edbf7c6e0b13'',?)"}',
null
),
('delete_app_notification_identity','day','write_mysql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''customer_identity'' and period=''{date_id}'' and status=''Succeed''',
'select n.id
from app_notification_identity n 
left semi join etl_update_customer c on c.update_day={date_key} and c.update_flag<=2 and (c.android_pushid_jg<>'''' or c.ios_pushid_jg<>'''') and n.customer_id=c.id
left anti join (select id customer_id, android_pushid_jg push_id,to_utc_timestamp(android_pushid_jg_create_timestamp,''Asia/Shanghai'') date_created,''android'' os
from etl_update_customer where update_day={date_key} and update_flag<=2 and android_pushid_jg<>''''
union all
select id customer_id, ios_pushid_jg push_id,to_utc_timestamp(ios_pushid_jg_create_timestamp,''Asia/Shanghai'') date_created,''ios'' os
from etl_update_customer where update_day={date_key} and update_flag<=2 and ios_pushid_jg<>'''') p on p.customer_id=n.customer_id and p.push_id=n.push_id
where n.tenant_id=8',
'{"sql":"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;delete from xiaoshu.app_notification_identity where id=?"}',
null
),
('customer_event_customer','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_customer'' and period=''{date_id}'' and status=''Succeed''',
'insert into customer_event
select 8 tenant_id,
id customer_id,
''c_registerMember'' event,
unix_timestamp(to_utc_timestamp(member_create_time,''Asia/Shanghai''))*1000 field_date,
unix_timestamp(to_utc_timestamp(member_create_time,''Asia/Shanghai''))*1000 external_id,
id,
case when customer_type=''member w trans'' then ''有交易会员'' else ''无交易会员'' end attr1,
channel_name attr2,
case when sex=''0'' then ''男'' when sex=''1'' then ''女'' else ''未知'' end attr3,
province_name attr4,
city_name attr5,
null channel_account,
null channel_type,
null device,
null employee,
null inbound,
null field_location,
null referrer,
null referrer_name,
null tag,
null target_id,
null target_name,
null campaign,
null campaign_name,
null content_name,
client_name source,
null summary,
null internal_content_id,
null last_forwarder,
null score,
null last_updated,
null ref_score,
null page_id,
''c_events'' event_group,
null batch_id,
null from_collector,
null app_name,
null app_version,
null quantity1,
null quantity2,
null amount1,
null amount2,
null identity_value,
null identity_type,
null identity_value2,
null identity_type2,
null identity_value3,
null identity_type3,
null is_first_try,
null is_first_engage,
null duration,
null utma,
null utm,
null quantity3,
unix_timestamp(to_utc_timestamp(member_create_time,''Asia/Shanghai''))*1000 date1,
(unix_timestamp(birthday,''yyyyMMdd'')-28800)*1000 date2,
null platform,
null os,
null os_version,
null browser,
null browser_version,
null model,
null network,
null ip,
null ip_county,
null ip_city,
null ip_province,
null ip_country,
null screen_width,
null screen_height,
null domain,
null path,
district_name attr6,
null attr7,
null attr8,
null attr9,
null attr10,
null amount3,
null date3,
null page_type,
null session_id,
null url,
null attr11,
null attr12,
null attr13,
null attr14,
null attr15,
null attr16,
null attr17,
null attr18,
null attr19,
null attr20,
null attr21,
null attr22,
null attr23,
null attr24,
null attr25,
null attr26,
null attr27,
null attr28,
null attr29,
null attr30,
null attr31,
null attr32,
null attr33,
null attr34,
null attr35,
null attr36,
null attr37,
null attr38,
null attr39,
null attr40,
null date4,
null date5,
null date6,
null date7,
null date8,
null date9,
null date10,
null amount4,
null amount5,
null amount6,
null amount7,
null amount8,
null amount9,
null amount10,
null longitude,
null latitude
from etl_update_customer where update_day={date_key} and update_flag=1',
null,
null
),
('etl_pull_u_value','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''customer_attr'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_pull_u_value partition(create_day={date_key})
select ct.id attr_id,
       ct.customer_id,
       case when concat(substr(u.value_updated_time,1,4),''-'',substr(u.value_updated_time,5,2),''-'',substr(u.value_updated_time,7,2))<=ct.attr17 then '''' else {date_key} end begin_date,
       u.customer_key,
       nvl(u.current_u_value,0),
       case when concat(substr(u.value_updated_time,1,4),''-'',substr(u.value_updated_time,5,2),''-'',substr(u.value_updated_time,7,2))<=ct.attr17 then ct.attr16 else nvl(ct.attr14,nvl(u.current_u_value,0)) end last_current_u_value,
       nvl(u.order_total_amt,0),
       u.value_updated_time,
       u.etl_date,
       u.create_time,
       u.update_time
from (select * from(select u.*,row_number() over (partition by customer_key order by value_updated_time desc) rn from adp_dw.member_u_value u) u where rn=1) u
left outer join (select id,customer_id,attr2,attr14,attr16,attr17 from customer_attr where tenant_id=8)ct on cast(u.customer_key as string)=ct.attr2',
null,
null
),
('member_u_value','day','write_mysql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_u_value'' and period=''{date_id}'' and status=''Succeed''',
'select u.last_current_u_value,
       u.last_current_u_value,
       u.current_u_value,
       u.current_u_value,
       u.order_total_amt,
       u.order_total_amt,
       concat(substr(u.value_updated_time,1,4),''-'',substr(u.value_updated_time,5,2),''-'',substr(u.value_updated_time,7,2)),
       concat(substr(u.value_updated_time,1,4),''-'',substr(u.value_updated_time,5,2),''-'',substr(u.value_updated_time,7,2)),
       u.attr_id
from (select u.*,row_number() over (partition by attr_id order by value_updated_time desc) rn from etl_pull_u_value u where u.create_day={date_key} and u.begin_date={date_key} and u.attr_id is not null) u where rn=1',
'{"sql":"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;update xiaoshu.customer_attr set attr16=?,num16=?,attr14=?,num14=?,attr15=?,num15=?,attr17=?,date17=? where id=?"}',
null
),
('etl_pull_coupon_send','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_customer'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_pull_coupon_send partition(create_day={date_key})
select
nvl(n1.id,monotonically_increasing_id()+datediff(''{date_id}'',''2019-07-31'')*10000000000000+8800000000000000000) as id,
case when n1.id is null or n.send_trace_update_time<>n1.send_trace_update_time then {date_key}
    else n1.begin_date end as begin_date,
n.coupon_seq,
n.system_id,
n.node_id,
n.activity_id,
n.coupon_key,
n.send_account,
n.send_account_type,
n.customer_key,
n.verify_code_md5,
n.verify_code_part,
n.verify_code_aes,
n.org_times,
n.remain_times,
n.price,
n.status,
n.verify_status,
n.send_status,
n.send_id,
n.add_time,
n.add_date_key,
n.start_time,
n.end_time,
n.outer_str,
n.short_url,
n.send_trace_update_time,
n.etl_date,
n.create_time,
n.update_time,
n.add_date,
c.id customer_id,
f.coupon_id,
f.coupon_name,
f.coupon_type_desc,
f.use_platform_desc,
case when c.id is null then ''null_customer''
    when f.coupon_id is null then ''null_coupon''
    when n1.id is not null then ''update''
    else ''create'' end data_status
from (select * from (select n.*,row_number() over (partition by coupon_seq order by send_trace_update_time desc) rn from adp_dw.fct_coupon_send_trace n where send_trace_update_time>=''{latest_etl_date_id}'' and end_time>=''{latest_etl_date_id}'' and customer_key<>0) n where n.rn=1) n
left outer join (select id,coupon_seq,send_trace_update_time,begin_date from etl_pull_coupon_send where create_day={latest_data_date_key}) n1 on n.coupon_seq=n1.coupon_seq
left outer join adp_dw.dim_coupon_info f on n.coupon_key=f.coupon_key
left outer join (select customer_key,id from etl_pull_customer where create_day={date_key}) c on n.customer_key=c.customer_key
union all
select
n1.id,
n1.begin_date,
n1.coupon_seq,
n1.system_id,
n1.node_id,
n1.activity_id,
n1.coupon_key,
n1.send_account,
n1.send_account_type,
n1.customer_key,
n1.verify_code_md5,
n1.verify_code_part,
n1.verify_code_aes,
n1.org_times,
n1.remain_times,
n1.price,
n1.status,
n1.verify_status,
n1.send_status,
n1.send_id,
n1.add_time,
n1.add_date_key,
n1.start_time,
n1.end_time,
n1.outer_str,
n1.short_url,
n1.send_trace_update_time,
n1.etl_date,
n1.create_time,
n1.update_time,
n1.add_date,
n1.customer_id,
n1.coupon_id,
n1.coupon_name,
n1.coupon_type_desc,
n1.use_platform_desc,
n1.data_status
from (select * from etl_pull_coupon_send where create_day={latest_data_date_key} and end_time>=''{date_id}'') n1
left anti join adp_dw.fct_coupon_send_trace n
on n.send_trace_update_time>=''{latest_etl_date_id}'' and n.end_time>=''{latest_etl_date_id}'' and n.customer_key<>0 and n.coupon_seq=n1.coupon_seq',
null,
null
),
('etl_pull_coupon_verify','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_customer'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_pull_coupon_verify partition(create_day={date_key})
select
monotonically_increasing_id()+datediff(''{date_id}'',''2019-07-31'')*10000000000000+8700000000000000000 as id,
{date_key} as begin_date,
v.id,
v.node_id,
v.store_key,
v.pos_id,
v.pos_seq,
v.sub_seq,
v.order_no,
v.coupon_seq,
v.coupon_key,
v.trans_type,
v.verify_date_key,
v.verify_datetime,
v.verify_amt,
v.customer_key,
v.phone_no,
v.status,
v.verify_code,
v.ret_code,
v.ret_exp,
v.org_pos_seq,
v.user_id,
v.verify_update_time,
v.etl_date,
v.create_time,
v.update_time,
v.verify_date,
c.id customer_id,
f.coupon_id,
f.coupon_name,
f.coupon_type_desc,
f.use_platform_desc,
s.store_name,
case when c.id is null then ''null_customer''
    when f.coupon_id is null then ''null_coupon''
    when s.store_name is null then ''null_store''
    else ''create'' end data_status
from (select v.*,nvl(cast(store_key as string),concat(''rand'',id)) new_store_key from adp_dw.fct_coupon_verify_trace v where verify_update_time>=''{latest_etl_date_id}'' and customer_key<>0) v
left outer join adp_dw.dim_coupon_info f on v.coupon_key=f.coupon_key
left outer join (select customer_key,id from etl_pull_customer where create_day={date_key}) c on v.customer_key=c.customer_key
left outer join (select store_key,store_name from adp_dw.dim_store where latest_date_flag=1) s on v.new_store_key=cast(s.store_key as string)',
null,
null
),
('customer_event_coupon_send','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_coupon_send'' and period=''{date_id}'' and status=''Succeed''',
'insert into customer_event
select 8 tenant_id,
customer_id,
''c_getOfflineCoupon'' event,
unix_timestamp(to_utc_timestamp(add_time,''Asia/Shanghai''))*1000 field_date,
coupon_seq external_id,
id,
coupon_id attr1,
coupon_name attr2,
coupon_type_desc attr3,
activity_id attr4,
system_id attr5,
null channel_account,
null channel_type,
null device,
null employee,
null inbound,
null field_location,
null referrer,
null referrer_name,
null tag,
null target_id,
null target_name,
null campaign,
null campaign_name,
null content_name,
null source,
null summary,
null internal_content_id,
null last_forwarder,
null score,
null last_updated,
null ref_score,
null page_id,
''c_events'' event_group,
null batch_id,
null from_collector,
null app_name,
null app_version,
null quantity1,
null quantity2,
null amount1,
null amount2,
null identity_value,
null identity_type,
null identity_value2,
null identity_type2,
null identity_value3,
null identity_type3,
null is_first_try,
null is_first_engage,
null duration,
null utma,
null utm,
null quantity3,
unix_timestamp(to_utc_timestamp(add_time,''Asia/Shanghai''))*1000 date1,
unix_timestamp(to_utc_timestamp(start_time,''Asia/Shanghai''))*1000 date2,
null platform,
null os,
null os_version,
null browser,
null browser_version,
null model,
null network,
null ip,
null ip_county,
null ip_city,
null ip_province,
null ip_country,
null screen_width,
null screen_height,
null domain,
null path,
use_platform_desc attr6,
case when status=''1'' then ''有效''
    when status=''2'' then ''无效''
    when status=''3'' then ''撤销''
    else ''其他'' end attr7,
case when verify_status=''1'' then ''未使用''
    when verify_status=''2'' then ''已使用完''
    else ''其他'' end attr8,
case when send_status=''1'' then ''待发送''
    when send_status=''2'' then ''发送成功''
    when send_status=''3'' then ''发送失败''
    else ''其他'' end  attr9,
null attr10,
null amount3,
unix_timestamp(to_utc_timestamp(end_time,''Asia/Shanghai''))*1000 date3,
null page_type,
null session_id,
null url,
null attr11,
null attr12,
null attr13,
null attr14,
null attr15,
null attr16,
null attr17,
null attr18,
null attr19,
null attr20,
null attr21,
null attr22,
null attr23,
null attr24,
null attr25,
null attr26,
null attr27,
null attr28,
null attr29,
null attr30,
null attr31,
null attr32,
null attr33,
null attr34,
null attr35,
null attr36,
null attr37,
null attr38,
null attr39,
null attr40,
unix_timestamp(to_utc_timestamp(send_trace_update_time,''Asia/Shanghai''))*1000 date4,
null date5,
null date6,
null date7,
null date8,
null date9,
null date10,
null amount4,
null amount5,
null amount6,
null amount7,
null amount8,
null amount9,
null amount10,
null longitude,
null latitude
from etl_pull_coupon_send where create_day={date_key} and begin_date={date_key} and customer_id is not null',
null,
null
),
('customer_event_coupon_verify','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_coupon_verify'' and period=''{date_id}'' and status=''Succeed''',
'insert into customer_event
select 8 tenant_id,
customer_id,
''c_redeemOfflineCoupon'' event,
unix_timestamp(to_utc_timestamp(verify_datetime,''Asia/Shanghai''))*1000 field_date,
verify_id external_id,
id,
coupon_id attr1,
coupon_name attr2,
coupon_type_desc attr3,
store_name attr4,
order_no attr5,
null channel_account,
null channel_type,
null device,
null employee,
null inbound,
null field_location,
null referrer,
null referrer_name,
null tag,
null target_id,
null target_name,
null campaign,
null campaign_name,
null content_name,
null source,
null summary,
null internal_content_id,
null last_forwarder,
null score,
null last_updated,
null ref_score,
null page_id,
''c_events'' event_group,
null batch_id,
null from_collector,
null app_name,
null app_version,
null quantity1,
null quantity2,
verify_amt amount1,
null amount2,
null identity_value,
null identity_type,
null identity_value2,
null identity_type2,
null identity_value3,
null identity_type3,
null is_first_try,
null is_first_engage,
null duration,
null utma,
null utm,
null quantity3,
unix_timestamp(to_utc_timestamp(verify_datetime,''Asia/Shanghai''))*1000 date1,
unix_timestamp(to_utc_timestamp(verify_update_time,''Asia/Shanghai''))*1000 date2,
null platform,
null os,
null os_version,
null browser,
null browser_version,
null model,
null network,
null ip,
null ip_county,
null ip_city,
null ip_province,
null ip_country,
null screen_width,
null screen_height,
null domain,
null path,
use_platform_desc attr6,
case when trans_type=1 then ''核销''
    when trans_type=2 then ''撤销(订单未上传)''
    when trans_type=3 then ''手工撤销''
    when trans_type=4 then ''撤销(订单已上传)''
    else ''其他'' end attr7,
case when status=1 then ''成功''
    when status=2 then ''被撤销''
    when status=4 then ''失败''
    else ''其他'' end attr8,
null attr9,
null attr10,
null amount3,
null date3,
null page_type,
null session_id,
null url,
null attr11,
null attr12,
null attr13,
null attr14,
null attr15,
null attr16,
null attr17,
null attr18,
null attr19,
null attr20,
null attr21,
null attr22,
null attr23,
null attr24,
null attr25,
null attr26,
null attr27,
null attr28,
null attr29,
null attr30,
null attr31,
null attr32,
null attr33,
null attr34,
null attr35,
null attr36,
null attr37,
null attr38,
null attr39,
null attr40,
null date4,
null date5,
null date6,
null date7,
null date8,
null date9,
null date10,
null amount4,
null amount5,
null amount6,
null amount7,
null amount8,
null amount9,
null amount10,
null longitude,
null latitude
from etl_pull_coupon_verify where create_day={date_key} and customer_id is not null',
null,
null
),
('etl_pull_total_order','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_customer'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_pull_total_order partition(create_day={date_key})
select
monotonically_increasing_id()+datediff(''{date_id}'',''2019-07-31'')*10000000000000+9000000000000000000 as id,
count(1) over (partition by order_no) as total_line_count,
c.id,
o.order_no,
o.order_line_no,
s.store_name,
o.store_key,
o.customer_key,
o.product_key,
o.sku,
o.address_key,
o.order_date_key,
o.order_datetime,
o.pay_date_key,
o.pay_date,
o.pay_datetime,
t.order_type_name,
o.order_type_key,
o.delivery_date_key,
o.delivery_date,
o.delivery_datetime,
o.original_price,
o.current_price,
o.qty,
o.order_amt,
o.real_amt,
o.discount_amt,
o.buss_discount_amt,
o.platform_discount_amt,
o.rate_fee,
o.freight_amt,
o.total_amt,
o.unit_retail_vat_incl,
o.data_source,
o.order_channel_key,
o.tax_incl,
o.etl_date,
o.create_time,
o.update_time,
o.order_date
from (select * from (select o.*,
                            nvl(cast(store_key as string),concat(''rand'',order_no)) new_store_key,
                            case when customer_key=0 then concat(''rand'',order_no) else cast(customer_key as string) end new_customer_key,
                            row_number() over (partition by case when order_no>''A'' then ''1'' else order_no end,order_line_no order by order_line_no) as rn
                    from adp_dw.fct_total_order_trans o where datediff(''{date_id}'',order_date)<=180 and substr(etl_date,1,8)<=''{next_date_key}'' and substr(etl_date,1,8)>''{latest_etl_date_key}'' and customer_key<>0 and qty>=0) where rn=1) o
left outer join (select id,customer_key from etl_pull_customer where create_day={date_key}) c on o.new_customer_key=cast(c.customer_key as string)
left outer join adp_dw.dim_order_type t on o.order_type_key=t.order_type_key
left outer join (select store_key,store_name from adp_dw.dim_store where latest_date_flag=1) s on o.new_store_key=cast(s.store_key as string)',
null,
null
),
('etl_update_total_order','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_total_order'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_update_total_order partition(update_day={date_key})
select
o.order_no,
o.customer_key,
o.customer_id,
o.data_source,
o.order_channel_key,
o.store_name,
o.store_key,
o.order_type_name,
o.order_type_key,
d.add_name,
d.mobile_no,
d.provice_name,
d.city_name,
d.district_name,
d.zip,
o.address_key,
o.order_date_key,
o.order_date,
o.order_datetime,
o.pay_date_key,
o.pay_date,
o.pay_datetime,
o.delivery_date_key,
o.delivery_date,
o.delivery_datetime,
o.etl_date,
o.create_time,
o.update_time,
case when o.customer_id is null then ''null_customer''
    when o.order_type_key is null then ''null_order_type''
    when p.product_key is null then ''null_product''
    when o.store_key is null then ''null_store''
    else ''create'' end data_status,
null state,
o.id,
o.order_line_no,
p.plu_id,
p.plu_name,
p.sku_cd,
concat(p.item_cd,''-'',p.item_name),
concat(p.sum_cd,''-'',p.sum_name),
concat(p.clr_cd,''-'',p.clr_name),
concat(p.size,''-'',p.size_name),
concat(p.pattern,''-'',p.pattern_name),
p.season_id,
concat(p.material,''-'',p.washing,''-'',p.styling,''-'',p.style_type,''-'',p.style_label,''-'',p.fillers),
g_m.core_category_mk,
g_m.sub_category_mk,
g_m.sub_category2_mk,
g_m.core_category_md,
g_m.sub_category_md,
g_e.core_category_ec,
g_e.sub_category_ec,
o.product_key,
o.sku,
o.original_price,
o.current_price,
o.qty,
o.order_amt,
o.real_amt,
o.discount_amt,
o.buss_discount_amt,
o.platform_discount_amt,
o.rate_fee,
o.freight_amt,
o.total_amt,
o.unit_retail_vat_incl,
o.tax_incl,
concat(p.dept_cd,''-'',p.dept_name) c_dept,
concat(p.gdept_cd,''-'',p.gdept_name) c_gdept
from (select *,(case when product_key=0 then concat(''rand'',id) else cast(product_key as string) end) new_product_key,
             nvl(cast(address_key as string),concat(''rand'',id)) new_address_key
             from etl_pull_total_order where create_day={date_key}) o
left outer join adp_dw.dim_delivery_address d on o.new_address_key=cast(d.address_key as string)
left outer join adp_dw.dim_product p on o.new_product_key=cast(p.product_key as string)
left outer join (
    select trim(sum_cd) as sum_cd,
    concat_ws('','',collect_set(case when category_type=''MK'' and mk_cate not in('''',''-'') then mk_cate else null end)) as core_category_mk,
    concat_ws('','',collect_set(case when category_type=''MK'' and mk_sub_category not in('''',''-'') then mk_sub_category else null end)) as sub_category_mk,
    concat_ws('','',collect_set(case when category_type=''MK'' and mk_core_cate1 not in('''',''-'') then mk_core_cate1 else null end)) as sub_category2_mk,
    concat_ws('','',collect_set(case when category_type=''MD'' and main_sum_group not in('''',''-'') then main_sum_group else null end)) as core_category_md,
    concat_ws('','',collect_set(case when category_type=''MD'' and submain_sum_group not in('''',''-'') then submain_sum_group else null end)) as sub_category_md
    from adp_dw.dim_product_category where category_type in(''MK'',''MD'') group by trim(sum_cd)) g_m on p.sum_cd=g_m.sum_cd
left outer join (
    select trim(item_cd) as item_cd,
    concat_ws('','',collect_set(case when ec_core_category not in('''',''-'') then ec_core_category else null end)) as core_category_ec,
    concat_ws('','',collect_set(case when ec_sub_category not in('''',''-'') then ec_sub_category else null end)) as sub_category_ec
    from adp_dw.dim_product_category where category_type in(''EC'') group by trim(item_cd)) g_e on p.item_cd=g_e.item_cd',
null,
null
),
('etl_pull_total_refund','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_total_order'' and period=''{date_id}'' and status=''Succeed''',
'insert overwrite table etl_pull_total_refund partition(create_day={date_key})
select
o.id-100000000000000000,
o.order_no,
o.order_line_no,
o.customer_id,
o.customer_key,
o.total_line_count,
o.store_name,
nvl(r2.refund_line_count,nvl(r1.refund_line_count,0)+(row_number() over (partition by o.order_no order by case when r2.order_no is not null then null else o.order_line_no end desc))) as refund_line_count,
case when o.qty+r.qty+nvl(r2.refund_qty,0)>=0 then r.qty+nvl(r2.refund_qty,0) else nvl(r2.refund_qty,o.qty*-1) end refund_qty,
case when o.qty+r.qty+nvl(r2.refund_qty,0)>=0 then r.order_amt+nvl(r2.refund_order_amt,0) else nvl(r2.refund_order_amt,o.order_amt*-1) end refund_order_amt,
case when o.qty+r.qty+nvl(r2.refund_qty,0)>=0 then r.total_amt+nvl(r2.refund_total_amt,0) else nvl(r2.refund_total_amt,o.total_amt*-1) end refund_total_amt,
case when o.qty+r.qty+nvl(r2.refund_qty,0)>=0 then r.discount_amt+nvl(r2.refund_discount_amt,0) else nvl(r2.refund_discount_amt,o.discount_amt) end refund_discount_amt,
nvl(r2.refund_delivery_datetime,r.delivery_datetime) refund_delivery_datetime,
r.*,
case when o.id is null then ''null_order''
    when o.customer_id is null then ''null_customer''
    else ''create'' end data_status,
    nvl(r1.refund_total_amt,0)-nvl(sum(r2.refund_total_amt) over(partition by r2.order_no),0) as his_refund_total_amt
from (select  concat_ws('','',collect_set(r.order_no)) as order_no,
        r.order_line_no,
        max(r.store_key),
        max(r.customer_key),
        r.product_key,
        max(r.sku),
        max(r.address_key),
        max(r.order_date_key),
        max(r.order_datetime),
        max(r.pay_date_key),
        max(r.pay_date),
        max(r.pay_datetime),
        max(r.order_type_key),
        max(r.delivery_date_key),
        max(r.delivery_date),
        max(r.delivery_datetime) as delivery_datetime,
        max(r.original_price),
        max(r.current_price),
        sum(r.qty) as qty,
        sum(r.order_amt) as order_amt,
        sum(r.real_amt),
        sum(r.discount_amt) as discount_amt,
        sum(r.buss_discount_amt),
        sum(r.platform_discount_amt),
        sum(r.rate_fee),
        sum(r.freight_amt),
        sum(r.total_amt) as total_amt,
        max(r.unit_retail_vat_incl),
        max(r.data_source),
        max(r.order_channel_key),
        max(r.tax_incl),
        max(r.etl_date),
        max(r.create_time),
        max(r.update_time),
        max(r.order_date)
    from adp_dw.fct_total_order_trans r where datediff(''{date_id}'',order_date)<=180 and substr(etl_date,1,8)<=''{next_date_key}'' and substr(etl_date,1,8)>''{latest_etl_date_key}'' and customer_key<>0 and qty<0 group by case when r.order_no>''A'' then ''1'' else r.order_no end,r.order_line_no,r.product_key) r
left outer join etl_pull_total_order o
    on o.create_day<={date_key} and unix_timestamp(''{date_key}'',''yyyyMMdd'')-unix_timestamp(cast(o.create_day as string),''yyyyMMdd'')<=15984000 and case when r.order_no>''A'' then ''1'' else r.order_no end = case when o.order_no>''A'' then ''1'' else o.order_no end and r.order_line_no=o.order_line_no and r.product_key=o.product_key
left outer join (select order_no,max(refund_line_count) as refund_line_count,sum(refund_total_amt) refund_total_amt from etl_pull_total_refund where create_day<{date_key} and unix_timestamp(''{date_key}'',''yyyyMMdd'')-unix_timestamp(cast(create_day as string),''yyyyMMdd'')<=15984000 group by order_no) r1 on o.order_no=r1.order_no
left outer join (select order_no,order_line_no,product_key,min(refund_qty) as refund_qty,max(refund_line_count) refund_line_count,min(refund_order_amt) as refund_order_amt,min(refund_total_amt) as refund_total_amt,max(refund_discount_amt) as refund_discount_amt,min(refund_delivery_datetime) as refund_delivery_datetime
    from etl_pull_total_refund where create_day<{date_key} and unix_timestamp(''{date_key}'',''yyyyMMdd'')-unix_timestamp(cast(create_day as string),''yyyyMMdd'')<=15984000 group by order_no,order_line_no,product_key) r2
    on case when r.order_no>''A'' then ''1'' else r.order_no end = case when r2.order_no>''A'' then ''1'' else r2.order_no end and r.order_line_no=r2.order_line_no and r.product_key=r2.product_key',
null,
null
),
('customer_event_order','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_total_order'' and period=''{date_id}'' and status=''Succeed''',
'insert into customer_event
select 8 tenant_id,
max(customer_id),
''make_order'' event,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 field_date,
order_no external_id,
max(id),
max(data_source) attr1,
max(store_name) attr2,
null attr3,
null attr4,
null attr5,
null channel_account,
null channel_type,
null device,
null employee,
null inbound,
null field_location,
null referrer,
null referrer_name,
null tag,
order_no target_id,
null target_name,
null campaign,
null campaign_name,
null content_name,
max(store_name) source,
null summary,
null internal_content_id,
null last_forwarder,
null score,
null last_updated,
null ref_score,
null page_id,
''deal'' event_group,
null batch_id,
null from_collector,
null app_name,
null app_version,
count(*) quantity1,
sum(qty) quantity2,
sum(total_amt) amount1,
sum(total_amt)/sum(qty) amount2,
null identity_value,
null identity_type,
null identity_value2,
null identity_type2,
null identity_value3,
null identity_type3,
null is_first_try,
null is_first_engage,
null duration,
null utma,
null utm,
null quantity3,
null date1,
null date2,
null platform,
null os,
null os_version,
null browser,
null browser_version,
null model,
null network,
null ip,
null ip_county,
null ip_city,
null ip_province,
null ip_country,
null screen_width,
null screen_height,
null domain,
null path,
null attr6,
null attr7,
null attr8,
null attr9,
null attr10,
null amount3,
null date3,
null page_type,
null session_id,
null url,
null attr11,
null attr12,
null attr13,
null attr14,
null attr15,
null attr16,
null attr17,
null attr18,
null attr19,
null attr20,
null attr21,
null attr22,
null attr23,
null attr24,
null attr25,
null attr26,
null attr27,
null attr28,
null attr29,
null attr30,
null attr31,
null attr32,
null attr33,
null attr34,
null attr35,
null attr36,
null attr37,
null attr38,
null attr39,
null attr40,
null date4,
null date5,
null date6,
null date7,
null date8,
null date9,
null date10,
null amount4,
null amount5,
null amount6,
null amount7,
null amount8,
null amount9,
null amount10,
null longitude,
null latitude
from etl_update_total_order where update_day={date_key} and customer_id is not null group by order_no',
null,
null
),
('customer_event_refund','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_total_refund'' and period=''{date_id}'' and status=''Succeed''',
'insert into customer_event
select 8 tenant_id,
customer_id,
''refund_order'' event,
unix_timestamp(to_utc_timestamp(refund_delivery_datetime,''Asia/Shanghai''))*1000 field_date,
concat(order_no,''-'',order_line_no) external_id,
id,
data_source attr1,
store_name attr2,
null attr3,
null attr4,
null attr5,
null channel_account,
null channel_type,
null device,
null employee,
null inbound,
null field_location,
null referrer,
null referrer_name,
null tag,
order_no target_id,
null target_name,
null campaign,
null campaign_name,
null content_name,
store_name source,
null summary,
null internal_content_id,
null last_forwarder,
null score,
null last_updated,
null ref_score,
null page_id,
''deal'' event_group,
null batch_id,
null from_collector,
null app_name,
null app_version,
null quantity1,
null quantity2,
refund_total_amt*-1 amount1,
null amount2,
null identity_value,
null identity_type,
null identity_value2,
null identity_type2,
null identity_value3,
null identity_type3,
null is_first_try,
null is_first_engage,
null duration,
null utma,
null utm,
null quantity3,
null date1,
null date2,
null platform,
null os,
null os_version,
null browser,
null browser_version,
null model,
null network,
null ip,
null ip_county,
null ip_city,
null ip_province,
null ip_country,
null screen_width,
null screen_height,
null domain,
null path,
null attr6,
null attr7,
null attr8,
null attr9,
null attr10,
null amount3,
null date3,
null page_type,
null session_id,
null url,
null attr11,
null attr12,
null attr13,
null attr14,
null attr15,
null attr16,
null attr17,
null attr18,
null attr19,
null attr20,
null attr21,
null attr22,
null attr23,
null attr24,
null attr25,
null attr26,
null attr27,
null attr28,
null attr29,
null attr30,
null attr31,
null attr32,
null attr33,
null attr34,
null attr35,
null attr36,
null attr37,
null attr38,
null attr39,
null attr40,
null date4,
null date5,
null date6,
null date7,
null date8,
null date9,
null date10,
null amount4,
null amount5,
null amount6,
null amount7,
null amount8,
null amount9,
null amount10,
null longitude,
null latitude
from etl_pull_total_refund where create_day={date_key} and customer_id is not null',
null,
null
),
('deal','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_total_order'' and period=''{date_id}'' and status=''Succeed''',
'insert into deal
select
8 tenant_id,
max(customer_id),
max(id),
0 version,
order_no name,
sum(total_amt) amount_paid,
null amount_return,
null amount_tax,
sum(order_amt) amount_total,
null payment_term,
null currency,
null customer_name,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 date_order,
null date_last_modify,
null external_id,
null external_invoice_id,
null external_partner_id,
null external_picking_id,
null invoice_address,
null shipping_address,
''已付款'' state,
null user_id,
null user_name,
max(order_type_name) type,
sum(discount_amt) amount_discount,
null payment_no,
max(add_name) contact_name,
max(mobile_no) contact_tel,
null shipping_method,
null amount_refund,
null group_id,
null remark,
null attr1,
null deal_lines,
null payment_status,
null delivery_status,
max(store_name) store,
max(data_source) sales_channel,
max(provice_name) shipping_province,
null shipping_street,
max(city_name) shipping_city,
max(district_name) shipping_county,
0 coupon_used,
null coupon_code,
null coupon_name,
null discount_type,
max(zip) zipcode,
null buyer_message,
max(customer_key) d_attr1,
max(order_channel_key) d_attr2,
null d_attr3,
null d_attr4,
null d_attr5,
null d_attr6,
null d_num1,
null d_num2,
null d_num3,
null d_num4,
null campaign,
unix_timestamp(to_utc_timestamp(max(pay_datetime),''Asia/Shanghai''))*1000 d_date1,
unix_timestamp(to_utc_timestamp(max(delivery_datetime),''Asia/Shanghai''))*1000 d_date2,
null d_date3,
null d_date4,
count(*) item_type_num,
sum(qty) item_num,
sum(total_amt)/sum(qty) item_average_price,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 date_created,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 last_updated,
null d_attr7,
null d_attr8,
null d_attr9,
null d_attr10,
null d_attr11,
null d_attr12,
null d_attr13,
null d_attr14,
null d_attr15,
null d_attr16,
null d_attr17,
null d_attr18,
null d_attr19,
null d_attr20,
null d_num5,
null d_num6,
null d_num7,
null d_num8,
null d_num9,
null d_num10,
null d_date5,
null d_date6,
null d_date7,
null d_date8,
null d_date9,
null d_date10
from etl_update_total_order where update_day={date_key} and customer_id is not null group by order_no',
null,
null),
('deal_line','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_total_order'' and period=''{date_id}'' and status=''Succeed''',
'insert into deal_line
select 8 tenant_id,
customer_id,
id,
0 version,
order_no,
plu_name product_name,
sku_cd sku_id,
current_price price_unit,
qty,
unix_timestamp(to_utc_timestamp(order_datetime,''Asia/Shanghai''))*1000 date_created,
core_category_mk category,
unix_timestamp(to_utc_timestamp(order_datetime,''Asia/Shanghai''))*1000 last_updated,
plu_id product_id,
order_amt price_sub_total,
0 task_id,
total_amt price_sub_paid,
c_item l_attr1,
c_sum l_attr2,
c_clr l_attr3,
c_size l_attr4,
c_pattern l_attr5,
c_season l_attr6,
original_price l_num1,
discount_amt l_num2,
null l_num3,
null l_num4,
null l_date1,
null l_date2,
null l_date3,
null l_date4,
null brand_name,
order_line_no line_id,
null discount_type,
null coupon_code,
c_others l_attr7,
sub_category_mk l_attr8,
sub_category2_mk l_attr9,
core_category_md l_attr10,
sub_category_md l_attr11,
core_category_ec l_attr12,
sub_category_ec l_attr13,
null l_attr14,
null l_attr15,
null l_attr16,
null l_attr17,
null l_attr18,
null l_attr19,
null l_attr20,
null l_num5,
null l_num6,
null l_num7,
null l_num8,
null l_num9,
null l_num10,
null l_date5,
null l_date6,
null l_date7,
null l_date8,
null l_date9,
null l_date10
from etl_update_total_order where update_day={date_key} and customer_id is not null',
null,
null),
('full_order','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_total_order'' and period=''{date_id}'' and status=''Succeed''',
'insert into full_order
select 8 tenant_id,
d.customer_id,
d.order_no,
nvl(o.order_line_no,''0'') line_id,
t.is_header,
0 is_member,
d.amount_paid,
d.amount_discount,
d.amount_total,
null payment_term,
null payment_no,
d.store,
d.sales_channel,
d.date_order,
null date_last_modify,
null external_id,
''已付款'' state,
d.type,
null group_id,
d.contact_name,
d.contact_tel,
d.zipcode,
null shipping_method,
d.shipping_province,
null shipping_street,
d.shipping_city,
d.shipping_county,
null shipping_address,
null discount_type,
0 coupon_used,
null coupon_code,
null coupon_name,
null user_id,
null customer_name,
null buyer_message,
null campaign,
null remark,
d.item_type_num,
d.item_num,
d.item_average_price,
d.d_attr1,
d.d_attr2,
null d_attr3,
null d_attr4,
null d_attr5,
null d_attr6,
null d_attr7,
null d_attr8,
null d_attr9,
null d_attr10,
null d_attr11,
null d_attr12,
null d_attr13,
null d_attr14,
null d_attr15,
null d_attr16,
null d_attr17,
null d_attr18,
null d_attr19,
null d_attr20,
null d_num1,
null d_num2,
null d_num3,
null d_num4,
null d_num5,
null d_num6,
null d_num7,
null d_num8,
null d_num9,
null d_num10,
d.d_date1,
d.d_date2,
null d_date3,
null d_date4,
null d_date5,
null d_date6,
null d_date7,
null d_date8,
null d_date9,
null d_date10,
o.core_category_mk category,
o.plu_id product_id,
o.plu_name product_name,
o.sku_cd sku_id,
o.current_price price_unit,
o.qty,
o.total_amt price_sub_paid,
o.order_amt price_sub_total,
null brand_name,
null date_refund,
null state_refund,
null qty_refund,
null total_refund,
o.c_item l_attr1,
o.c_sum l_attr2,
o.c_clr l_attr3,
o.c_size l_attr4,
o.c_pattern l_attr5,
o.c_season l_attr6,
o.c_others l_attr7,
o.sub_category_mk l_attr8,
o.sub_category2_mk l_attr9,
o.core_category_md l_attr10,
o.sub_category_md l_attr11,
o.core_category_ec l_attr12,
o.sub_category_ec l_attr13,
o.c_dept l_attr14,
o.c_gdept l_attr15,
null l_attr16,
null l_attr17,
null l_attr18,
null l_attr19,
null l_attr20,
o.original_price l_num1,
o.discount_amt l_num2,
null l_num3,
null l_num4,
null l_num5,
null l_num6,
null l_num7,
null l_num8,
null l_num9,
null l_num10,
null l_date1,
null l_date2,
null l_date3,
null l_date4,
null l_date5,
null l_date6,
null l_date7,
null l_date8,
null l_date9,
null l_date10,
d.date_created,
d.last_updated,
null reason_refund,
null merchant_point
from (select max(customer_id) customer_id,
order_no,
sum(total_amt) amount_paid,
sum(order_amt) amount_total,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 date_order,
max(order_type_name) type,
sum(discount_amt) amount_discount,
max(add_name) contact_name,
max(mobile_no) contact_tel,
max(store_name) store,
max(data_source) sales_channel,
max(provice_name) shipping_province,
max(city_name) shipping_city,
max(district_name) shipping_county,
max(zip) zipcode,
max(customer_key) d_attr1,
max(order_channel_key) d_attr2,
unix_timestamp(to_utc_timestamp(max(pay_datetime),''Asia/Shanghai''))*1000 d_date1,
unix_timestamp(to_utc_timestamp(max(delivery_datetime),''Asia/Shanghai''))*1000 d_date2,
count(*) item_type_num,
sum(qty) item_num,
sum(total_amt)/sum(qty) item_average_price,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 date_created,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 last_updated
from etl_update_total_order where update_day={date_key} and customer_id is not null group by order_no) d
cross join (select 1 is_header union all select 0 is_header) t
left outer join etl_update_total_order o on o.update_day={date_key} and o.customer_id is not null and d.order_no=o.order_no and t.is_header=0',
null,
null
),
('deal_refund','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_total_refund'' and period=''{date_id}'' and status=''Succeed''',
'insert into deal_refund
select 8 tenant_id,
customer_id,
id,
unix_timestamp(to_utc_timestamp(delivery_datetime,''Asia/Shanghai''))*1000 date_created,
unix_timestamp(to_utc_timestamp(delivery_datetime,''Asia/Shanghai''))*1000 last_updated,
0 version,
order_no,
unix_timestamp(to_utc_timestamp(delivery_datetime,''Asia/Shanghai''))*1000 date_refund,
case when refund_line_count>=total_line_count then ''完全退单'' else ''部分退单'' end state,
refund_total_amt*-1 refund_total,
null reason
from etl_pull_total_refund where create_day={date_key} and customer_id is not null',
null,
null
),
('deal_line_refund','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_pull_total_refund'' and period=''{date_id}'' and status=''Succeed''',
'insert into deal_line_refund
select 8 tenant_id,
customer_id,
id,
unix_timestamp(to_utc_timestamp(delivery_datetime,''Asia/Shanghai''))*1000 date_created,
unix_timestamp(to_utc_timestamp(delivery_datetime,''Asia/Shanghai''))*1000 last_updated,
id refund_id,
0 version,
order_no,
order_line_no line_id,
refund_qty*-1 qty,
current_price price_unit,
refund_total_amt*-1 price_sub_total
from etl_pull_total_refund where create_day={date_key} and customer_id is not null',
null,
null
),
('full_order_refund','day','sql','2019-07-01 00:00:00','xiapengcheng',true,
'select count(1)=3 from etl_task_run where task_name in(''etl_update_total_order'',''etl_pull_total_refund'',''full_order'') and period=''{date_id}'' and status=''Succeed''',
'with o as (
    select o.*,
    r1.all_refund_total_amt,
    r1.all_state_refund,
    r1.all_date_refund,
    unix_timestamp(to_utc_timestamp(r2.refund_delivery_datetime,''Asia/Shanghai''))*1000 date_refund,
    r2.refund_total_amt,
    r2.refund_qty 
    from etl_update_total_order o inner join 
    (select order_no,avg(his_refund_total_amt)+sum(refund_total_amt) all_refund_total_amt,
        max(case when refund_line_count>=total_line_count then 1 else 0 end) all_state_refund,
        unix_timestamp(to_utc_timestamp(max(refund_delivery_datetime),''Asia/Shanghai''))*1000 all_date_refund 
    from etl_pull_total_refund where create_day={date_key} and customer_id is not null group by order_no) r1 on o.order_no=r1.order_no
    left outer join etl_pull_total_refund r2 on r2.create_day={date_key} and r2.customer_id is not null and o.order_no=r2.order_no and o.order_line_no=r2.order_line_no
    where o.update_day<={date_key} and unix_timestamp(''{date_key}'',''yyyyMMdd'')-unix_timestamp(cast(o.update_day as string),''yyyyMMdd'')<=15984000 and o.customer_id is not null)
insert into full_order
select 8 tenant_id,
d.customer_id,
d.order_no,
nvl(o.order_line_no,''0'') line_id,
t.is_header,
0 is_member,
d.amount_paid,
d.amount_discount,
d.amount_total,
null payment_term,
null payment_no,
d.store,
d.sales_channel,
d.date_order,
null date_last_modify,
null external_id,
''已付款'' state,
d.type,
null group_id,
d.contact_name,
d.contact_tel,
d.zipcode,
null shipping_method,
d.shipping_province,
null shipping_street,
d.shipping_city,
d.shipping_county,
null shipping_address,
null discount_type,
0 coupon_used,
null coupon_code,
null coupon_name,
null user_id,
null customer_name,
null buyer_message,
null campaign,
null remark,
d.item_type_num,
d.item_num,
d.item_average_price,
d.d_attr1,
d.d_attr2,
null d_attr3,
null d_attr4,
null d_attr5,
null d_attr6,
null d_attr7,
null d_attr8,
null d_attr9,
null d_attr10,
null d_attr11,
null d_attr12,
null d_attr13,
null d_attr14,
null d_attr15,
null d_attr16,
null d_attr17,
null d_attr18,
null d_attr19,
null d_attr20,
null d_num1,
null d_num2,
null d_num3,
null d_num4,
null d_num5,
null d_num6,
null d_num7,
null d_num8,
null d_num9,
null d_num10,
d.d_date1,
d.d_date2,
null d_date3,
null d_date4,
null d_date5,
null d_date6,
null d_date7,
null d_date8,
null d_date9,
null d_date10,
o.core_category_mk category,
o.plu_id product_id,
o.plu_name product_name,
o.sku_cd sku_id,
o.current_price price_unit,
o.qty,
o.total_amt price_sub_paid,
o.order_amt price_sub_total,
null brand_name,
case when t.is_header=1 then d.all_date_refund else o.date_refund end date_refund,
case when t.is_header=1 then case when d.all_state_refund=1 then ''完全退单'' else ''部分退单'' end else null end state_refund,
case when t.is_header=1 then null else o.refund_qty*-1 end qty_refund,
case when t.is_header=1 then d.all_refund_total_amt*-1 else o.refund_total_amt*-1 end total_refund,
o.c_item l_attr1,
o.c_sum l_attr2,
o.c_clr l_attr3,
o.c_size l_attr4,
o.c_pattern l_attr5,
o.c_season l_attr6,
o.c_others l_attr7,
o.sub_category_mk l_attr8,
o.sub_category2_mk l_attr9,
o.core_category_md l_attr10,
o.sub_category_md l_attr11,
o.core_category_ec l_attr12,
o.sub_category_ec l_attr13,
o.c_dept l_attr14,
o.c_gdept l_attr15,
null l_attr16,
null l_attr17,
null l_attr18,
null l_attr19,
null l_attr20,
o.original_price l_num1,
o.discount_amt l_num2,
null l_num3,
null l_num4,
null l_num5,
null l_num6,
null l_num7,
null l_num8,
null l_num9,
null l_num10,
null l_date1,
null l_date2,
null l_date3,
null l_date4,
null l_date5,
null l_date6,
null l_date7,
null l_date8,
null l_date9,
null l_date10,
d.date_created,
d.last_updated,
null reason_refund,
null merchant_point
from (select max(customer_id) customer_id,
order_no,
sum(total_amt) amount_paid,
sum(order_amt) amount_total,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 date_order,
max(order_type_name) type,
sum(discount_amt) amount_discount,
max(add_name) contact_name,
max(mobile_no) contact_tel,
max(store_name) store,
max(data_source) sales_channel,
max(provice_name) shipping_province,
max(city_name) shipping_city,
max(district_name) shipping_county,
max(zip) zipcode,
max(customer_key) d_attr1,
max(order_channel_key) d_attr2,
unix_timestamp(to_utc_timestamp(max(pay_datetime),''Asia/Shanghai''))*1000 d_date1,
unix_timestamp(to_utc_timestamp(max(delivery_datetime),''Asia/Shanghai''))*1000 d_date2,
count(*) item_type_num,
sum(qty) item_num,
sum(total_amt)/sum(qty) item_average_price,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 date_created,
unix_timestamp(to_utc_timestamp(max(order_datetime),''Asia/Shanghai''))*1000 last_updated,
max(all_refund_total_amt) all_refund_total_amt,
max(all_state_refund) all_state_refund,
max(all_date_refund) all_date_refund
from o group by order_no) d
cross join (select 1 is_header union all select 0 is_header) t
left outer join o on d.order_no=o.order_no and t.is_header=0
where t.is_header=1 or ( t.is_header=0 and o.refund_qty is not null)',
null,
null
),
('dim_coupon_info','day','write_mysql','2019-07-01 00:00:00','xiapengcheng',true,
null,
'select 
coupon_key,
coupon_id,
node_id,
coupon_name,
coupon_pic,
coupon_remark,
price,
use_store_flag,
use_store_flag_desc,
store_group_id,
receive_limit,
receive_limit_desc,
add_datetime,
add_date,
add_date_key,
add_user,
coupon_type,
coupon_type_desc,
creat_platform,
use_platform,
use_platform_desc,
use_price_limit,
use_notice,
discount_rule,
discount_rule_desc,
discount_ratio,
receiver_upper_limit,
receiver_upper_limit_desc,
receiver_limit_times,
begin_time,
end_time,
card_id,
status,
status_desc,
coupon_get_url,
use_min_pieces,
print_text,
verify_begin_type,
verify_begin_type_desc,
verify_end_type,
verify_end_type_desc,
verify_begin_days,
verify_end_days,
verify_begin_time,
verify_end_time,
test_flag,
etl_date,
create_time,
update_time from adp_dw.dim_coupon_info',
'{"sql":"SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;insert into uniqlo.dim_coupon_info(tenant_id,version,date_created,last_updated,coupon_key,coupon_id,node_id,coupon_name,coupon_pic,coupon_remark,price,use_store_flag,use_store_flag_desc,store_group_id,receive_limit,receive_limit_desc,add_datetime,add_date,add_date_key,add_user,coupon_type,coupon_type_desc,creat_platform,use_platform,use_platform_desc,use_price_limit,use_notice,discount_rule,discount_rule_desc,discount_ratio,receiver_upper_limit,receiver_upper_limit_desc,receiver_limit_times,begin_time,end_time,card_id,status,status_desc,coupon_get_url,use_min_pieces,print_text,verify_begin_type,verify_begin_type_desc,verify_end_type,verify_end_type_desc,verify_begin_days,verify_end_days,verify_begin_time,verify_end_time,test_flag,etl_date,create_time,update_time) values (8,0,now(),now(),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE coupon_key=values(coupon_key),coupon_id=values(coupon_id),node_id=values(node_id),coupon_name=values(coupon_name),coupon_pic=values(coupon_pic),coupon_remark=values(coupon_remark),price=values(price),use_store_flag=values(use_store_flag),use_store_flag_desc=values(use_store_flag_desc),store_group_id=values(store_group_id),receive_limit=values(receive_limit),receive_limit_desc=values(receive_limit_desc),add_datetime=values(add_datetime),add_date=values(add_date),add_date_key=values(add_date_key),add_user=values(add_user),coupon_type=values(coupon_type),coupon_type_desc=values(coupon_type_desc),creat_platform=values(creat_platform),use_platform=values(use_platform),use_platform_desc=values(use_platform_desc),use_price_limit=values(use_price_limit),use_notice=values(use_notice),discount_rule=values(discount_rule),discount_rule_desc=values(discount_rule_desc),discount_ratio=values(discount_ratio),receiver_upper_limit=values(receiver_upper_limit),receiver_upper_limit_desc=values(receiver_upper_limit_desc),receiver_limit_times=values(receiver_limit_times),begin_time=values(begin_time),end_time=values(end_time),card_id=values(card_id),status=values(status),status_desc=values(status_desc),coupon_get_url=values(coupon_get_url),use_min_pieces=values(use_min_pieces),print_text=values(print_text),verify_begin_type=values(verify_begin_type),verify_begin_type_desc=values(verify_begin_type_desc),verify_end_type=values(verify_end_type),verify_end_type_desc=values(verify_end_type_desc),verify_begin_days=values(verify_begin_days),verify_end_days=values(verify_end_days),verify_begin_time=values(verify_begin_time),verify_end_time=values(verify_end_time),test_flag=values(test_flag),etl_date=values(etl_date),create_time=values(create_time),update_time=values(update_time)"}',
null
),
('daily_30days_tag_update','day','rabbitmq','2019-07-01 00:00:00','xiapengcheng',true,
null,
'rabbitmq',
'{"exchange":"customer_content_tag_exchange","routingKey":"daily_30days_tag_update","message":"{\\"tenantId\\":8}"}',
null
),
('daily_order_stat_update','day','rabbitmq','2019-07-01 00:00:00','xiapengcheng',true,
'select count(1)=2 from etl_task_run where task_name in(''full_order_refund'',''full_order'') and period=''{date_id}'' and status=''Succeed''',
'rabbitmq',
'{"exchange":"order_stat_exchange","routingKey":"daily_order_stat_update","message":"{\\"tenantId\\":8}"}',
null
),
('tag_processing_exchange','day','rabbitmq','2019-07-01 00:00:00','xiapengcheng',true,
'select count(1)=11 from etl_task_run where task_name in(''member_u_value'',''customer'',''customer_attr'',''customer_identity'',''customer_event_coupon_send'',''customer_event_coupon_verify'',''customer_event_customer'',''customer_event_order'',''customer_event_refund'',''full_order_refund'',''full_order'') and period=''{date_id}'' and status=''Succeed''',
'rabbitmq',
'{"exchange":"tag_processing_exchange","routingKey":"trigger_task","message":"{\\"tenantId\\":8}"}',
null
),
('list_rebuild_trigger_queue','day','rabbitmq','2019-07-01 00:00:00','xiapengcheng',true,
'select count(1)=11 from etl_task_run where task_name in(''member_u_value'',''customer'',''customer_attr'',''customer_identity'',''customer_event_coupon_send'',''customer_event_coupon_verify'',''customer_event_customer'',''customer_event_order'',''customer_event_refund'',''full_order_refund'',''full_order'') and period=''{date_id}'' and status=''Succeed''',
'rabbitmq',
'{"exchange":"","routingKey":"list_rebuild_trigger_queue","message":"{\\"tenantId\\":8}"}',
null
),
('customer_merge_async','day','rabbitmq','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_customer_identity'' and period=''{date_id}'' and status=''Succeed''',
'select collect_set(from_id) fromIds, to_id toId,8 tenantId from etl_update_customer_identity where update_day={date_key} group by to_id',
'{"exchange":"customer_merge_async_exchange","routingKey":"customer_merge_async"}',
null
),
('customer_event_merge_async','day','kafka','2019-07-01 00:00:00','xiapengcheng',true,
'select true from etl_task_run where task_name=''etl_update_customer_identity'' and period=''{date_id}'' and status=''Succeed''',
'select collect_set(from_id) fromIds, to_id toId,8 tenantId from etl_update_customer_identity where update_day={date_key} group by to_id',
'{"topic":"customer_event_merge_mapping","key":"toId"}',
null
);



('daily_30days_score_update','day','rabbitmq','2019-07-01 00:00:00','xiapengcheng',true,
'select count(1)=11 from etl_task_run where task_name in(''member_u_value'',''customer'',''customer_attr'',''customer_identity'',''customer_event_coupon_send'',''customer_event_coupon_verify'',''customer_event_customer'',''customer_event_order'',''customer_event_refund'',''full_order_refund'',''full_order'') and period=''{date_id}'' and status=''Succeed''',
'rabbitmq',
'{"exchange":"customer_score_exchange","routingKey":"daily_30days_score_update","message":"{\\"tenantId\\":8}"}',
null
),
('daily_7days_score_update','day','rabbitmq','2019-07-01 00:00:00','xiapengcheng',true,
'select count(1)=11 from etl_task_run where task_name in(''member_u_value'',''customer'',''customer_attr'',''customer_identity'',''customer_event_coupon_send'',''customer_event_coupon_verify'',''customer_event_customer'',''customer_event_order'',''customer_event_refund'',''full_order_refund'',''full_order'') and period=''{date_id}'' and status=''Succeed''',
'rabbitmq',
'{"exchange":"customer_score_exchange","routingKey":"daily_7days_score_update","message":"{\\"tenantId\\":8}"}',
null
);
('test_kafka','day','kafka','2019-07-01 00:00:00','xiapengcheng',true,null,'select "name1" name,"value1" value','{"topic":"test_kafka_topic1"}',null);

